{"ast":null,"code":"var _jsxFileName = \"C:\\\\AWS\\\\CECYTEMDespliegue\\\\Practica4_1\\\\recomendaciones-ia\\\\src\\\\App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*import React, { useState } from 'react';\nimport './App.css';\nimport peliculas from './data/peliculas.json';\nfunction App() {\n  const [input, setInput] = useState('');\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState(peliculas);\n  const [recomendacionIA, setRecomendacionIA] = useState('');\n  const [peliculasRecomendadas, setPeliculasRecomendadas] = useState([]);\n  \n  const handleBuscarTexto = () => {\n    const texto = input.toLowerCase();\n\n    const filtradas = peliculas.filter((peli) =>\n      peli.titulo.toLowerCase().includes(texto) ||\n      peli.genero.toLowerCase().includes(texto) ||\n      peli.titulo.toLowerCase().startsWith(texto)\n    );\n\n    setPeliculasFiltradas(filtradas);\n    setPeliculasRecomendadas([]);\n    setRecomendacionIA('');\n  };\n  const handleBuscarDescripcion = async () => {\n    setRecomendacionIA('Pensando...');\n    setPeliculasRecomendadas([]);\n    setPeliculasFiltradas([]);\n    try {\n      const response = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          prompt: `Tengo una base de datos con estas pel√≠culas: ${peliculas.map(p => p.titulo).join(', ')}. Quiero que me digas solo los t√≠tulos de las pel√≠culas que coincidan con esta descripci√≥n: \"${input}\". Devu√©lveme √∫nicamente los t√≠tulos separados por comas.`\n      }),\n    });\n\n    const data = await response.json();\n    const textoIA = data.recomendacion.toLowerCase();\n    setRecomendacionIA(data.recomendacion);\n\n    const coincidencias = peliculas.filter((peli) => \n      textoIA.includes(peli.titulo.toLowerCase())\n    );\n    \n    setPeliculasRecomendadas(coincidencias);\n  } catch (err) {\n    setRecomendacionIA('‚ùå Error al obtener recomendaci√≥n IA.');\n  }\n};\n\nreturn (\n  <div className=\"App\">\n    <h1 className=\"titulo\">CECYFLIX</h1>\n    <div className=\"buscador\">\n      <input\n        type=\"text\"\n        placeholder=\"¬øQu√© te gustar√≠a ver hoy?\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        required\n      />\n      <button onClick={handleBuscarTexto}>Buscar</button>\n      <button onClick={handleBuscarDescripcion} className=\"btn-ia\">\n      Buscar por descripci√≥n</button>\n  </div>\n  \n  {recomendacionIA && (\n    <div className=\"bloque-recomendaciones\">\n      <h2>‚ú® Recomendaci√≥n IA</h2>\n      <p>{recomendacionIA}</p>\n    </div>\n  )}\n\n  {peliculasRecomendadas.length > 0 && (\n    <div className=\"galeria\">\n      <h2>üéû Pel√≠culas recomendadas por IA</h2>\n      <div className=\"grid\">\n        {peliculasRecomendadas.map((peli) => (\n          <div className=\"tarjeta\" key={peli.id}>\n            <img src={peli.poster} alt={peli.titulo} />\n            <div className=\"info\">\n              <h3>{peli.titulo}</h3>\n              <p>{peli.descripcion}</p>\n              <span>{peli.genero}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )}\n\n      {peliculasFiltradas.length > 0 && (\n        <div className=\"galeria\">\n          <h2>üé¨ Todas las pel√≠culas</h2>\n          <div className=\"grid\">\n            {peliculasFiltradas.map((peli) => (\n              <div className=\"tarjeta\" key={peli.id}>\n                <img src={peli.poster} alt={peli.titulo} />\n                <div className=\"info\">\n                  <h3>{peli.titulo}</h3>\n                  <p>{peli.descripcion}</p>\n                  <span>{peli.genero}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default App;*/\n\nconst [peliculas, setPeliculas] = useState([]);\nconst [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\nconst [busqueda, setBusqueda] = useState('');\nconst [modoDescripcion, setModoDescripcion] = useState(false);\nconst [recomendacion, setRecomendacion] = useState('');\nuseEffect(() => {\n  fetch('/api/peliculas').then(res => res.json()).then(data => {\n    setPeliculas(data);\n    setPeliculasFiltradas(data);\n  }).catch(err => console.error('Error al obtener pel√≠culas:', err));\n}, []);\nconst handleBuscar = e => {\n  e.preventDefault();\n  const texto = busqueda.toLowerCase();\n  const resultado = peliculas.filter(p => p.titulo.toLowerCase().includes(texto) || p.genero.toLowerCase().includes(texto) || p.titulo.toLowerCase().startsWith(texto));\n  setPeliculasFiltradas(resultado);\n  setRecomendacion('');\n};\nconst handleBuscarPorDescripcion = async () => {\n  try {\n    const res = await fetch('/api/recomendaciones', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: `Dame una recomendaci√≥n basada en esta descripci√≥n:\n      ${busqueda}. Usa solo pel√≠culas de este cat√°logo:\n      ${peliculas.map(p => p.titulo).join(', ')}.`\n      })\n    });\n    const data = await res.json();\n    setRecomendacion(data.recomendacion);\n    const seleccionadas = peliculas.filter(p => data.recomendacion.toLowerCase().includes(p.titulo.toLowerCase()));\n    if (seleccionadas.length > 0) {\n      setPeliculasFiltradas(seleccionadas);\n    }\n  } catch (err) {\n    console.error('Error con IA:', err);\n  }\n};\n/*#__PURE__*/_jsxDEV(\"form\", {\n  className: \"buscador\",\n  onSubmit: handleBuscar,\n  children: /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    placeholder: modoDescripcion ? 'Describe la peli que buscas...' : 'Busca por t√≠tulo o g√©nero',\n    value: busqueda,\n    onChange: e => setBusqueda(e.target.value)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 3\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 164,\n  columnNumber: 1\n}, this);\n{\n  recomendacion && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bloque-recomendaciones\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"IA sugiere:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: recomendacion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 3\n  }, this);\n}\n/*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"grid\",\n  children: peliculasFiltradas.map((p, i) => {\n    var _p$descripcion;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tarjeta\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: p.poster,\n        alt: p.titulo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: p.titulo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: p.genero\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [(_p$descripcion = p.descripcion) === null || _p$descripcion === void 0 ? void 0 : _p$descripcion.slice(0, 60), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }, this);\n  })\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 185,\n  columnNumber: 1\n}, this);\n\n/*\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Aseg√∫rate de que este archivo exista en tu proyecto\n\nfunction App() {\n  // Estados para almacenar las pel√≠culas, el filtro de b√∫squeda, el modo de b√∫squeda y la recomendaci√≥n de IA\n  const [peliculas, setPeliculas] = useState([]);\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\n  const [busqueda, setBusqueda] = useState('');\n  const [modoDescripcion, setModoDescripcion] = useState(false); // false para b√∫squeda tradicional, true para IA\n  const [recomendacion, setRecomendacion] = useState('');\n\n  // useEffect para cargar las pel√≠culas desde el backend cuando el componente se monta\n  useEffect(() => {\n    // Realiza una petici√≥n GET a la API de pel√≠culas de tu backend\n    fetch('/api/peliculas')\n      .then(res => res.json()) // Convierte la respuesta a JSON\n      .then(data => {\n        setPeliculas(data); // Guarda todas las pel√≠culas obtenidas\n        setPeliculasFiltradas(data); // Inicialmente, las pel√≠culas filtradas son todas las pel√≠culas\n      })\n      .catch(err => console.error('Error al obtener pel√≠culas:', err)); // Manejo de errores\n  }, []); // El array de dependencias vac√≠o asegura que este efecto se ejecute solo una vez (al montar)\n\n  // Funci√≥n para manejar la b√∫squeda tradicional (por t√≠tulo o g√©nero)\n  const handleBuscar = (e) => {\n    e.preventDefault(); // Previene el comportamiento por defecto del formulario\n    const texto = busqueda.toLowerCase(); // Convierte el texto de b√∫squeda a min√∫sculas\n    // Filtra las pel√≠culas que coincidan con el t√≠tulo, g√©nero o que empiecen con el texto\n    const resultado = peliculas.filter(p =>\n      p.titulo.toLowerCase().includes(texto) ||\n      p.genero.toLowerCase().includes(texto) ||\n      p.titulo.toLowerCase().startsWith(texto)\n    );\n    setPeliculasFiltradas(resultado); // Actualiza el estado de las pel√≠culas filtradas\n    setRecomendacion(''); // Limpia cualquier recomendaci√≥n de IA anterior\n  };\n\n  // Funci√≥n para manejar la b√∫squeda por descripci√≥n usando IA\n  const handleBuscarPorDescripcion = async () => {\n    try {\n      // Realiza una petici√≥n POST a la API de recomendaciones de IA de tu backend\n      const res = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        // Env√≠a un prompt a la IA con la descripci√≥n de b√∫squeda y el cat√°logo de pel√≠culas\n        body: JSON.stringify({ prompt: `Dame una recomendaci√≥n basada en esta descripci√≥n: ${busqueda}. Usa solo pel√≠culas de este cat√°logo: ${peliculas.map(p => p.titulo).join(', ')}.` })\n      });\n      const data = await res.json(); // Convierte la respuesta a JSON\n      setRecomendacion(data.recomendacion); // Guarda la recomendaci√≥n generada por la IA\n\n      // Filtra las pel√≠culas cuyo t√≠tulo est√© contenido en la recomendaci√≥n de la IA\n      const seleccionadas = peliculas.filter(p =>\n        data.recomendacion.toLowerCase().includes(p.titulo.toLowerCase())\n      );\n\n      // Si hay pel√≠culas seleccionadas, actualiza el estado de las pel√≠culas filtradas\n      if (seleccionadas.length > 0) {\n        setPeliculasFiltradas(seleccionadas);\n      } else {\n        // Si no hay coincidencias directas, puedes decidir qu√© mostrar (por ejemplo, todas las pel√≠culas o un mensaje)\n        setPeliculasFiltradas([]); // Opcional: mostrar un array vac√≠o si no hay coincidencias\n      }\n    } catch (err) {\n      console.error('Error con IA:', err); // Manejo de errores en la petici√≥n a la IA\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CineVerse</h1>\n        <form className=\"buscador\" onSubmit={modoDescripcion ? null : handleBuscar}>\n          <input\n            type=\"text\"\n            placeholder={modoDescripcion ? 'Describe la peli que buscas...' : 'Busca por t√≠tulo o g√©nero'}\n            value={busqueda}\n            onChange={e => setBusqueda(e.target.value)}\n          />\n          <div className=\"botones-busqueda\">\n            {\n              //Bot√≥n de b√∫squeda tradicional o por IA, seg√∫n el modo seleccionado \n            }\n            {!modoDescripcion ? (\n              <button type=\"submit\">Buscar</button>\n            ) : (\n              <button type=\"button\" onClick={handleBuscarPorDescripcion}>Buscar por IA</button>\n            )}\n            {\n            // Bot√≥n para alternar entre los modos de b√∫squeda \n            }\n            <button\n              type=\"button\"\n              onClick={() => setModoDescripcion(!modoDescripcion)}\n            >\n              Cambiar a b√∫squeda {modoDescripcion ? 'tradicional' : 'por IA'}\n            </button>\n          </div>\n        </form>\n        {\n        //Muestra la recomendaci√≥n de IA si existe \n        }\n        {recomendacion && (\n          <div className=\"bloque-recomendaciones\">\n            <h2>IA sugiere:</h2>\n            <p>{recomendacion}</p>\n          </div>\n        )}\n      </header>\n\n      <main className=\"grid\">\n        {\n        //Mapea y renderiza las pel√≠culas filtradas \n        }\n        {peliculasFiltradas.map((p, i) => (\n          <div className=\"tarjeta\" key={i}>\n            {\n            // Muestra el p√≥ster de la pel√≠cula o un placeholder si no hay imagen \n            }\n            <img\n              src={p.poster || `https://placehold.co/200x300/cccccc/333333?text=${p.titulo}`}\n              alt={p.titulo}\n              className=\"rounded-lg shadow-md\"\n            />\n            <div className=\"info\">\n              <h3>{p.titulo}</h3>\n              <p>{p.genero}</p>\n              {\n              // Muestra una sinopsis limitada a 60 caracteres \n              }\n              <span>{p.descripcion?.slice(0, 60)}...</span>\n            </div>\n          </div>\n        ))}\n      </main>\n    </div>\n  );\n}\n*/\nexport default App;","map":{"version":3,"names":["peliculas","setPeliculas","useState","peliculasFiltradas","setPeliculasFiltradas","busqueda","setBusqueda","modoDescripcion","setModoDescripcion","recomendacion","setRecomendacion","useEffect","fetch","then","res","json","data","catch","err","console","error","handleBuscar","e","preventDefault","texto","toLowerCase","resultado","filter","p","titulo","includes","genero","startsWith","handleBuscarPorDescripcion","method","headers","body","JSON","stringify","prompt","map","join","seleccionadas","length","_jsxDEV","className","onSubmit","children","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","i","_p$descripcion","src","poster","alt","descripcion","slice","App"],"sources":["C:/AWS/CECYTEMDespliegue/Practica4_1/recomendaciones-ia/src/App.js"],"sourcesContent":["/*import React, { useState } from 'react';\nimport './App.css';\nimport peliculas from './data/peliculas.json';\nfunction App() {\n  const [input, setInput] = useState('');\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState(peliculas);\n  const [recomendacionIA, setRecomendacionIA] = useState('');\n  const [peliculasRecomendadas, setPeliculasRecomendadas] = useState([]);\n  \n  const handleBuscarTexto = () => {\n    const texto = input.toLowerCase();\n\n    const filtradas = peliculas.filter((peli) =>\n      peli.titulo.toLowerCase().includes(texto) ||\n      peli.genero.toLowerCase().includes(texto) ||\n      peli.titulo.toLowerCase().startsWith(texto)\n    );\n\n    setPeliculasFiltradas(filtradas);\n    setPeliculasRecomendadas([]);\n    setRecomendacionIA('');\n  };\n  const handleBuscarDescripcion = async () => {\n    setRecomendacionIA('Pensando...');\n    setPeliculasRecomendadas([]);\n    setPeliculasFiltradas([]);\n    try {\n      const response = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          prompt: `Tengo una base de datos con estas pel√≠culas: ${peliculas.map(p => p.titulo).join(', ')}. Quiero que me digas solo los t√≠tulos de las pel√≠culas que coincidan con esta descripci√≥n: \"${input}\". Devu√©lveme √∫nicamente los t√≠tulos separados por comas.`\n      }),\n    });\n\n    const data = await response.json();\n    const textoIA = data.recomendacion.toLowerCase();\n    setRecomendacionIA(data.recomendacion);\n\n    const coincidencias = peliculas.filter((peli) => \n      textoIA.includes(peli.titulo.toLowerCase())\n    );\n    \n    setPeliculasRecomendadas(coincidencias);\n  } catch (err) {\n    setRecomendacionIA('‚ùå Error al obtener recomendaci√≥n IA.');\n  }\n};\n\nreturn (\n  <div className=\"App\">\n    <h1 className=\"titulo\">CECYFLIX</h1>\n    <div className=\"buscador\">\n      <input\n        type=\"text\"\n        placeholder=\"¬øQu√© te gustar√≠a ver hoy?\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        required\n      />\n      <button onClick={handleBuscarTexto}>Buscar</button>\n      <button onClick={handleBuscarDescripcion} className=\"btn-ia\">\n      Buscar por descripci√≥n</button>\n  </div>\n  \n  {recomendacionIA && (\n    <div className=\"bloque-recomendaciones\">\n      <h2>‚ú® Recomendaci√≥n IA</h2>\n      <p>{recomendacionIA}</p>\n    </div>\n  )}\n\n  {peliculasRecomendadas.length > 0 && (\n    <div className=\"galeria\">\n      <h2>üéû Pel√≠culas recomendadas por IA</h2>\n      <div className=\"grid\">\n        {peliculasRecomendadas.map((peli) => (\n          <div className=\"tarjeta\" key={peli.id}>\n            <img src={peli.poster} alt={peli.titulo} />\n            <div className=\"info\">\n              <h3>{peli.titulo}</h3>\n              <p>{peli.descripcion}</p>\n              <span>{peli.genero}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )}\n\n      {peliculasFiltradas.length > 0 && (\n        <div className=\"galeria\">\n          <h2>üé¨ Todas las pel√≠culas</h2>\n          <div className=\"grid\">\n            {peliculasFiltradas.map((peli) => (\n              <div className=\"tarjeta\" key={peli.id}>\n                <img src={peli.poster} alt={peli.titulo} />\n                <div className=\"info\">\n                  <h3>{peli.titulo}</h3>\n                  <p>{peli.descripcion}</p>\n                  <span>{peli.genero}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default App;*/\n\n\nconst [peliculas, setPeliculas] = useState([]);\nconst [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\nconst [busqueda, setBusqueda] = useState('');\nconst [modoDescripcion, setModoDescripcion] = useState(false);\nconst [recomendacion, setRecomendacion] = useState('');\n\nuseEffect(() => {\n  fetch('/api/peliculas')\n    .then(res => res.json())\n    .then(data => {\n      setPeliculas(data);\n      setPeliculasFiltradas(data);\n    })\n    .catch(err => console.error('Error al obtener pel√≠culas:', err));\n}, []);\n\nconst handleBuscar = (e) => {\n  e.preventDefault();\n  const texto = busqueda.toLowerCase();\n  const resultado = peliculas.filter(p =>\n    p.titulo.toLowerCase().includes(texto) ||\n    p.genero.toLowerCase().includes(texto) ||\n    p.titulo.toLowerCase().startsWith(texto)\n  );\n  setPeliculasFiltradas(resultado);\n  setRecomendacion('');\n};\n\nconst handleBuscarPorDescripcion = async () => {\n  try {\n    const res = await fetch('/api/recomendaciones', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ prompt: `Dame una recomendaci√≥n basada en esta descripci√≥n:\n      ${busqueda}. Usa solo pel√≠culas de este cat√°logo:\n      ${peliculas.map(p => p.titulo).join(', ')}.` })\n    });\n    const data = await res.json();\n    setRecomendacion(data.recomendacion);\n    const seleccionadas = peliculas.filter(p =>\n      data.recomendacion.toLowerCase().includes(p.titulo.toLowerCase())\n   );\n   if (seleccionadas.length > 0) {\n     setPeliculasFiltradas(seleccionadas);\n   }\n  } catch (err) {\n   console.error('Error con IA:', err);\n  }\n};\n\n<form className=\"buscador\" onSubmit={handleBuscar}>\n  <input\n    type=\"text\"\n    placeholder={modoDescripcion ? 'Describe la peli que buscas...' :\n      'Busca por t√≠tulo o g√©nero'}\n    value={busqueda}\n    onChange={e => setBusqueda(e.target.value)}\n  />\n  {\n  // Botones condicionales seg√∫n el modo\n  } \n  \n</form>\n\n{recomendacion && (\n  <div className=\"bloque-recomendaciones\">\n    <h2>IA sugiere:</h2>\n    <p>{recomendacion}</p>\n  </div>\n)}\n\n<div className=\"grid\">\n  {peliculasFiltradas.map((p, i) => (\n    <div className=\"tarjeta\" key={i}>\n      <img src={p.poster} alt={p.titulo} />\n      <div className=\"info\">\n        <h3>{p.titulo}</h3>\n        <p>{p.genero}</p>\n        <span>{p.descripcion?.slice(0, 60)}...</span>\n      </div>\n    </div>\n  ))}\n</div>\n\n/*\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Aseg√∫rate de que este archivo exista en tu proyecto\n\nfunction App() {\n  // Estados para almacenar las pel√≠culas, el filtro de b√∫squeda, el modo de b√∫squeda y la recomendaci√≥n de IA\n  const [peliculas, setPeliculas] = useState([]);\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\n  const [busqueda, setBusqueda] = useState('');\n  const [modoDescripcion, setModoDescripcion] = useState(false); // false para b√∫squeda tradicional, true para IA\n  const [recomendacion, setRecomendacion] = useState('');\n\n  // useEffect para cargar las pel√≠culas desde el backend cuando el componente se monta\n  useEffect(() => {\n    // Realiza una petici√≥n GET a la API de pel√≠culas de tu backend\n    fetch('/api/peliculas')\n      .then(res => res.json()) // Convierte la respuesta a JSON\n      .then(data => {\n        setPeliculas(data); // Guarda todas las pel√≠culas obtenidas\n        setPeliculasFiltradas(data); // Inicialmente, las pel√≠culas filtradas son todas las pel√≠culas\n      })\n      .catch(err => console.error('Error al obtener pel√≠culas:', err)); // Manejo de errores\n  }, []); // El array de dependencias vac√≠o asegura que este efecto se ejecute solo una vez (al montar)\n\n  // Funci√≥n para manejar la b√∫squeda tradicional (por t√≠tulo o g√©nero)\n  const handleBuscar = (e) => {\n    e.preventDefault(); // Previene el comportamiento por defecto del formulario\n    const texto = busqueda.toLowerCase(); // Convierte el texto de b√∫squeda a min√∫sculas\n    // Filtra las pel√≠culas que coincidan con el t√≠tulo, g√©nero o que empiecen con el texto\n    const resultado = peliculas.filter(p =>\n      p.titulo.toLowerCase().includes(texto) ||\n      p.genero.toLowerCase().includes(texto) ||\n      p.titulo.toLowerCase().startsWith(texto)\n    );\n    setPeliculasFiltradas(resultado); // Actualiza el estado de las pel√≠culas filtradas\n    setRecomendacion(''); // Limpia cualquier recomendaci√≥n de IA anterior\n  };\n\n  // Funci√≥n para manejar la b√∫squeda por descripci√≥n usando IA\n  const handleBuscarPorDescripcion = async () => {\n    try {\n      // Realiza una petici√≥n POST a la API de recomendaciones de IA de tu backend\n      const res = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        // Env√≠a un prompt a la IA con la descripci√≥n de b√∫squeda y el cat√°logo de pel√≠culas\n        body: JSON.stringify({ prompt: `Dame una recomendaci√≥n basada en esta descripci√≥n: ${busqueda}. Usa solo pel√≠culas de este cat√°logo: ${peliculas.map(p => p.titulo).join(', ')}.` })\n      });\n      const data = await res.json(); // Convierte la respuesta a JSON\n      setRecomendacion(data.recomendacion); // Guarda la recomendaci√≥n generada por la IA\n\n      // Filtra las pel√≠culas cuyo t√≠tulo est√© contenido en la recomendaci√≥n de la IA\n      const seleccionadas = peliculas.filter(p =>\n        data.recomendacion.toLowerCase().includes(p.titulo.toLowerCase())\n      );\n\n      // Si hay pel√≠culas seleccionadas, actualiza el estado de las pel√≠culas filtradas\n      if (seleccionadas.length > 0) {\n        setPeliculasFiltradas(seleccionadas);\n      } else {\n        // Si no hay coincidencias directas, puedes decidir qu√© mostrar (por ejemplo, todas las pel√≠culas o un mensaje)\n        setPeliculasFiltradas([]); // Opcional: mostrar un array vac√≠o si no hay coincidencias\n      }\n    } catch (err) {\n      console.error('Error con IA:', err); // Manejo de errores en la petici√≥n a la IA\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CineVerse</h1>\n        <form className=\"buscador\" onSubmit={modoDescripcion ? null : handleBuscar}>\n          <input\n            type=\"text\"\n            placeholder={modoDescripcion ? 'Describe la peli que buscas...' : 'Busca por t√≠tulo o g√©nero'}\n            value={busqueda}\n            onChange={e => setBusqueda(e.target.value)}\n          />\n          <div className=\"botones-busqueda\">\n            {\n              //Bot√≥n de b√∫squeda tradicional o por IA, seg√∫n el modo seleccionado \n            }\n            {!modoDescripcion ? (\n              <button type=\"submit\">Buscar</button>\n            ) : (\n              <button type=\"button\" onClick={handleBuscarPorDescripcion}>Buscar por IA</button>\n            )}\n            {\n            // Bot√≥n para alternar entre los modos de b√∫squeda \n            }\n            <button\n              type=\"button\"\n              onClick={() => setModoDescripcion(!modoDescripcion)}\n            >\n              Cambiar a b√∫squeda {modoDescripcion ? 'tradicional' : 'por IA'}\n            </button>\n          </div>\n        </form>\n        {\n        //Muestra la recomendaci√≥n de IA si existe \n        }\n        {recomendacion && (\n          <div className=\"bloque-recomendaciones\">\n            <h2>IA sugiere:</h2>\n            <p>{recomendacion}</p>\n          </div>\n        )}\n      </header>\n\n      <main className=\"grid\">\n        {\n        //Mapea y renderiza las pel√≠culas filtradas \n        }\n        {peliculasFiltradas.map((p, i) => (\n          <div className=\"tarjeta\" key={i}>\n            {\n            // Muestra el p√≥ster de la pel√≠cula o un placeholder si no hay imagen \n            }\n            <img\n              src={p.poster || `https://placehold.co/200x300/cccccc/333333?text=${p.titulo}`}\n              alt={p.titulo}\n              className=\"rounded-lg shadow-md\"\n            />\n            <div className=\"info\">\n              <h3>{p.titulo}</h3>\n              <p>{p.genero}</p>\n              {\n              // Muestra una sinopsis limitada a 60 caracteres \n              }\n              <span>{p.descripcion?.slice(0, 60)}...</span>\n            </div>\n          </div>\n        ))}\n      </main>\n    </div>\n  );\n}\n*/\nexport default App; "],"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeQ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}