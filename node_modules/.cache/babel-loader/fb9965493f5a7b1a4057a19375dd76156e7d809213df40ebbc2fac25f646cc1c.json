{"ast":null,"code":"/*import React, { useState } from 'react';\nimport './App.css';\nimport peliculas from './data/peliculas.json';\nfunction App() {\n  const [input, setInput] = useState('');\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState(peliculas);\n  const [recomendacionIA, setRecomendacionIA] = useState('');\n  const [peliculasRecomendadas, setPeliculasRecomendadas] = useState([]);\n  \n  const handleBuscarTexto = () => {\n    const texto = input.toLowerCase();\n\n    const filtradas = peliculas.filter((peli) =>\n      peli.titulo.toLowerCase().includes(texto) ||\n      peli.genero.toLowerCase().includes(texto) ||\n      peli.titulo.toLowerCase().startsWith(texto)\n    );\n\n    setPeliculasFiltradas(filtradas);\n    setPeliculasRecomendadas([]);\n    setRecomendacionIA('');\n  };\n  const handleBuscarDescripcion = async () => {\n    setRecomendacionIA('Pensando...');\n    setPeliculasRecomendadas([]);\n    setPeliculasFiltradas([]);\n    try {\n      const response = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          prompt: `Tengo una base de datos con estas pel√≠culas: ${peliculas.map(p => p.titulo).join(', ')}. Quiero que me digas solo los t√≠tulos de las pel√≠culas que coincidan con esta descripci√≥n: \"${input}\". Devu√©lveme √∫nicamente los t√≠tulos separados por comas.`\n      }),\n    });\n\n    const data = await response.json();\n    const textoIA = data.recomendacion.toLowerCase();\n    setRecomendacionIA(data.recomendacion);\n\n    const coincidencias = peliculas.filter((peli) => \n      textoIA.includes(peli.titulo.toLowerCase())\n    );\n    \n    setPeliculasRecomendadas(coincidencias);\n  } catch (err) {\n    setRecomendacionIA('‚ùå Error al obtener recomendaci√≥n IA.');\n  }\n};\n\nreturn (\n  <div className=\"App\">\n    <h1 className=\"titulo\">CECYFLIX</h1>\n    <div className=\"buscador\">\n      <input\n        type=\"text\"\n        placeholder=\"¬øQu√© te gustar√≠a ver hoy?\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        required\n      />\n      <button onClick={handleBuscarTexto}>Buscar</button>\n      <button onClick={handleBuscarDescripcion} className=\"btn-ia\">\n      Buscar por descripci√≥n</button>\n  </div>\n  \n  {recomendacionIA && (\n    <div className=\"bloque-recomendaciones\">\n      <h2>‚ú® Recomendaci√≥n IA</h2>\n      <p>{recomendacionIA}</p>\n    </div>\n  )}\n\n  {peliculasRecomendadas.length > 0 && (\n    <div className=\"galeria\">\n      <h2>üéû Pel√≠culas recomendadas por IA</h2>\n      <div className=\"grid\">\n        {peliculasRecomendadas.map((peli) => (\n          <div className=\"tarjeta\" key={peli.id}>\n            <img src={peli.poster} alt={peli.titulo} />\n            <div className=\"info\">\n              <h3>{peli.titulo}</h3>\n              <p>{peli.descripcion}</p>\n              <span>{peli.genero}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )}\n\n      {peliculasFiltradas.length > 0 && (\n        <div className=\"galeria\">\n          <h2>üé¨ Todas las pel√≠culas</h2>\n          <div className=\"grid\">\n            {peliculasFiltradas.map((peli) => (\n              <div className=\"tarjeta\" key={peli.id}>\n                <img src={peli.poster} alt={peli.titulo} />\n                <div className=\"info\">\n                  <h3>{peli.titulo}</h3>\n                  <p>{peli.descripcion}</p>\n                  <span>{peli.genero}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default App;*/\n\nconst [peliculas, setPeliculas] = useState([]);\nconst [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\nconst [busqueda, setBusqueda] = useState('');\nconst [modoDescripcion, setModoDescripcion] = useState(false);\nconst [recomendacion, setRecomendacion] = useState('');\nuseEffect(() => {\n  fetch('/api/peliculas').then(res => res.json()).then(data => {\n    setPeliculas(data);\n    setPeliculasFiltradas(data);\n  }).catch(err => console.error('Error al obtener pel√≠culas:', err));\n}, []);\nconst handleBuscar = e => {\n  e.preventDefault();\n  const texto = busqueda.toLowerCase();\n  const resultado = peliculas.filter(p => p.titulo.toLowerCase().includes(texto) || p.genero.toLowerCase().includes(texto) || p.titulo.toLowerCase().startsWith(texto));\n  setPeliculasFiltradas(resultado);\n  setRecomendacion('');\n};\nconst handleBuscarPorDescripcion = async () => {\n  try {\n    const res = await fetch('/api/recomendaciones', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: `Dame una recomendaci√≥n basada en esta descripci√≥n:\n      ${busqueda}. Usa solo pel√≠culas de este cat√°logo:\n      ${peliculas.map(p => p.titulo).join(', ')}.`\n      })\n    });\n    const data = await res.json();\n    setRecomendacion(data.recomendacion);\n    const seleccionadas = peliculas.filter(p => data.recomendacion.toLowerCase().includes(p.titulo.toLowerCase()));\n    if (seleccionadas.length > 0) {\n      setPeliculasFiltradas(seleccionadas);\n    }\n  } catch (err) {\n    console.error('Error con IA:', err);\n  }\n};","map":{"version":3,"names":["peliculas","setPeliculas","useState","peliculasFiltradas","setPeliculasFiltradas","busqueda","setBusqueda","modoDescripcion","setModoDescripcion","recomendacion","setRecomendacion","useEffect","fetch","then","res","json","data","catch","err","console","error","handleBuscar","e","preventDefault","texto","toLowerCase","resultado","filter","p","titulo","includes","genero","startsWith","handleBuscarPorDescripcion","method","headers","body","JSON","stringify","prompt","map","join","seleccionadas","length"],"sources":["C:/AWS/CECYTEMDespliegue/Practica4_1/recomendaciones-ia/src/App.js"],"sourcesContent":["/*import React, { useState } from 'react';\nimport './App.css';\nimport peliculas from './data/peliculas.json';\nfunction App() {\n  const [input, setInput] = useState('');\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState(peliculas);\n  const [recomendacionIA, setRecomendacionIA] = useState('');\n  const [peliculasRecomendadas, setPeliculasRecomendadas] = useState([]);\n  \n  const handleBuscarTexto = () => {\n    const texto = input.toLowerCase();\n\n    const filtradas = peliculas.filter((peli) =>\n      peli.titulo.toLowerCase().includes(texto) ||\n      peli.genero.toLowerCase().includes(texto) ||\n      peli.titulo.toLowerCase().startsWith(texto)\n    );\n\n    setPeliculasFiltradas(filtradas);\n    setPeliculasRecomendadas([]);\n    setRecomendacionIA('');\n  };\n  const handleBuscarDescripcion = async () => {\n    setRecomendacionIA('Pensando...');\n    setPeliculasRecomendadas([]);\n    setPeliculasFiltradas([]);\n    try {\n      const response = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          prompt: `Tengo una base de datos con estas pel√≠culas: ${peliculas.map(p => p.titulo).join(', ')}. Quiero que me digas solo los t√≠tulos de las pel√≠culas que coincidan con esta descripci√≥n: \"${input}\". Devu√©lveme √∫nicamente los t√≠tulos separados por comas.`\n      }),\n    });\n\n    const data = await response.json();\n    const textoIA = data.recomendacion.toLowerCase();\n    setRecomendacionIA(data.recomendacion);\n\n    const coincidencias = peliculas.filter((peli) => \n      textoIA.includes(peli.titulo.toLowerCase())\n    );\n    \n    setPeliculasRecomendadas(coincidencias);\n  } catch (err) {\n    setRecomendacionIA('‚ùå Error al obtener recomendaci√≥n IA.');\n  }\n};\n\nreturn (\n  <div className=\"App\">\n    <h1 className=\"titulo\">CECYFLIX</h1>\n    <div className=\"buscador\">\n      <input\n        type=\"text\"\n        placeholder=\"¬øQu√© te gustar√≠a ver hoy?\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        required\n      />\n      <button onClick={handleBuscarTexto}>Buscar</button>\n      <button onClick={handleBuscarDescripcion} className=\"btn-ia\">\n      Buscar por descripci√≥n</button>\n  </div>\n  \n  {recomendacionIA && (\n    <div className=\"bloque-recomendaciones\">\n      <h2>‚ú® Recomendaci√≥n IA</h2>\n      <p>{recomendacionIA}</p>\n    </div>\n  )}\n\n  {peliculasRecomendadas.length > 0 && (\n    <div className=\"galeria\">\n      <h2>üéû Pel√≠culas recomendadas por IA</h2>\n      <div className=\"grid\">\n        {peliculasRecomendadas.map((peli) => (\n          <div className=\"tarjeta\" key={peli.id}>\n            <img src={peli.poster} alt={peli.titulo} />\n            <div className=\"info\">\n              <h3>{peli.titulo}</h3>\n              <p>{peli.descripcion}</p>\n              <span>{peli.genero}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )}\n\n      {peliculasFiltradas.length > 0 && (\n        <div className=\"galeria\">\n          <h2>üé¨ Todas las pel√≠culas</h2>\n          <div className=\"grid\">\n            {peliculasFiltradas.map((peli) => (\n              <div className=\"tarjeta\" key={peli.id}>\n                <img src={peli.poster} alt={peli.titulo} />\n                <div className=\"info\">\n                  <h3>{peli.titulo}</h3>\n                  <p>{peli.descripcion}</p>\n                  <span>{peli.genero}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default App;*/\n\nconst [peliculas, setPeliculas] = useState([]);\nconst [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\nconst [busqueda, setBusqueda] = useState('');\nconst [modoDescripcion, setModoDescripcion] = useState(false);\nconst [recomendacion, setRecomendacion] = useState('');\n\nuseEffect(() => {\n  fetch('/api/peliculas')\n    .then(res => res.json())\n    .then(data => {\n      setPeliculas(data);\n      setPeliculasFiltradas(data);\n    })\n    .catch(err => console.error('Error al obtener pel√≠culas:', err));\n}, []);\n\nconst handleBuscar = (e) => {\n  e.preventDefault();\n  const texto = busqueda.toLowerCase();\n  const resultado = peliculas.filter(p =>\n    p.titulo.toLowerCase().includes(texto) ||\n    p.genero.toLowerCase().includes(texto) ||\n    p.titulo.toLowerCase().startsWith(texto)\n  );\n  setPeliculasFiltradas(resultado);\n  setRecomendacion('');\n};\n\nconst handleBuscarPorDescripcion = async () => {\n  try {\n    const res = await fetch('/api/recomendaciones', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ prompt: `Dame una recomendaci√≥n basada en esta descripci√≥n:\n      ${busqueda}. Usa solo pel√≠culas de este cat√°logo:\n      ${peliculas.map(p => p.titulo).join(', ')}.` })\n    });\n    const data = await res.json();\n    setRecomendacion(data.recomendacion);\n    const seleccionadas = peliculas.filter(p =>\n      data.recomendacion.toLowerCase().includes(p.titulo.toLowerCase())\n   );\n   if (seleccionadas.length > 0) {\n     setPeliculasFiltradas(seleccionadas);\n   }\n  } catch (err) {\n   console.error('Error con IA:', err);\n  }\n};"],"mappingskBAAkB,EAAEC,qBAAqB,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;AAChE,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;AAC5C,MAAM,CAACK,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;AAC7D,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;AAEtDS,SAAS,CAAC,MAAM;EACdC,KAAK,CAAC,gBAAgB,CAAC,CACpBC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;IACZf,YAAY,CAACe,IAAI,CAAC;IAClBZ,qBAAqB,CAACY,IAAI,CAAC;EAC7B,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC,CAAC;AACpE,CAAC,EAAE,EAAE,CAAC;AAEN,MAAMG,YAAY,GAAIC,CAAC,IAAK;EAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClB,MAAMC,KAAK,GAAGnB,QAAQ,CAACoB,WAAW,CAAC,CAAC;EACpC,MAAMC,SAAS,GAAG1B,SAAS,CAAC2B,MAAM,CAACC,CAAC,IAClCA,CAAC,CAACC,MAAM,CAACJ,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,KAAK,CAAC,IACtCI,CAAC,CAACG,MAAM,CAACN,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,KAAK,CAAC,IACtCI,CAAC,CAACC,MAAM,CAACJ,WAAW,CAAC,CAAC,CAACO,UAAU,CAACR,KAAK,CACzC,CAAC;EACDpB,qBAAqB,CAACsB,SAAS,CAAC;EAChChB,gBAAgB,CAAC,EAAE,CAAC;AACtB,CAAC;AAED,MAAMuB,0BAA0B,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF,MAAMnB,GAAG,GAAG,MAAMF,KAAK,CAAC,sBAAsB,EAAE;MAC9CsB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,MAAM,EAAE;AACrC,QAAQlC,QAAQ;AAChB,QAAQL,SAAS,CAACwC,GAAG,CAACZ,CAAC,IAAIA,CAAC,CAACC,MAAM,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC;MAAI,CAAC;IAChD,CAAC,CAAC;IACF,MAAMzB,IAAI,GAAG,MAAMF,GAAG,CAACC,IAAI,CAAC,CAAC;IAC7BL,gBAAgB,CAACM,IAAI,CAACP,aAAa,CAAC;IACpC,MAAMiC,aAAa,GAAG1C,SAAS,CAAC2B,MAAM,CAACC,CAAC,IACtCZ,IAAI,CAACP,aAAa,CAACgB,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACF,CAAC,CAACC,MAAM,CAACJ,WAAW,CAAC,CAAC,CACnE,CAAC;IACD,IAAIiB,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;MAC5BvC,qBAAqB,CAACsC,aAAa,CAAC;IACtC;EACD,CAAC,CAAC,OAAOxB,GAAG,EAAE;IACbC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEF,GAAG,CAAC;EACpC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}