{"ast":null,"code":"/*import React, { useState } from 'react';\nimport './App.css';\nimport peliculas from './data/peliculas.json';\nfunction App() {\n  const [input, setInput] = useState('');\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState(peliculas);\n  const [recomendacionIA, setRecomendacionIA] = useState('');\n  const [peliculasRecomendadas, setPeliculasRecomendadas] = useState([]);\n  \n  const handleBuscarTexto = () => {\n    const texto = input.toLowerCase();\n\n    const filtradas = peliculas.filter((peli) =>\n      peli.titulo.toLowerCase().includes(texto) ||\n      peli.genero.toLowerCase().includes(texto) ||\n      peli.titulo.toLowerCase().startsWith(texto)\n    );\n\n    setPeliculasFiltradas(filtradas);\n    setPeliculasRecomendadas([]);\n    setRecomendacionIA('');\n  };\n  const handleBuscarDescripcion = async () => {\n    setRecomendacionIA('Pensando...');\n    setPeliculasRecomendadas([]);\n    setPeliculasFiltradas([]);\n    try {\n      const response = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          prompt: `Tengo una base de datos con estas pel√≠culas: ${peliculas.map(p => p.titulo).join(', ')}. Quiero que me digas solo los t√≠tulos de las pel√≠culas que coincidan con esta descripci√≥n: \"${input}\". Devu√©lveme √∫nicamente los t√≠tulos separados por comas.`\n      }),\n    });\n\n    const data = await response.json();\n    const textoIA = data.recomendacion.toLowerCase();\n    setRecomendacionIA(data.recomendacion);\n\n    const coincidencias = peliculas.filter((peli) => \n      textoIA.includes(peli.titulo.toLowerCase())\n    );\n    \n    setPeliculasRecomendadas(coincidencias);\n  } catch (err) {\n    setRecomendacionIA('‚ùå Error al obtener recomendaci√≥n IA.');\n  }\n};\n\nreturn (\n  <div className=\"App\">\n    <h1 className=\"titulo\">CECYFLIX</h1>\n    <div className=\"buscador\">\n      <input\n        type=\"text\"\n        placeholder=\"¬øQu√© te gustar√≠a ver hoy?\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        required\n      />\n      <button onClick={handleBuscarTexto}>Buscar</button>\n      <button onClick={handleBuscarDescripcion} className=\"btn-ia\">\n      Buscar por descripci√≥n</button>\n  </div>\n  \n  {recomendacionIA && (\n    <div className=\"bloque-recomendaciones\">\n      <h2>‚ú® Recomendaci√≥n IA</h2>\n      <p>{recomendacionIA}</p>\n    </div>\n  )}\n\n  {peliculasRecomendadas.length > 0 && (\n    <div className=\"galeria\">\n      <h2>üéû Pel√≠culas recomendadas por IA</h2>\n      <div className=\"grid\">\n        {peliculasRecomendadas.map((peli) => (\n          <div className=\"tarjeta\" key={peli.id}>\n            <img src={peli.poster} alt={peli.titulo} />\n            <div className=\"info\">\n              <h3>{peli.titulo}</h3>\n              <p>{peli.descripcion}</p>\n              <span>{peli.genero}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )}\n\n      {peliculasFiltradas.length > 0 && (\n        <div className=\"galeria\">\n          <h2>üé¨ Todas las pel√≠culas</h2>\n          <div className=\"grid\">\n            {peliculasFiltradas.map((peli) => (\n              <div className=\"tarjeta\" key={peli.id}>\n                <img src={peli.poster} alt={peli.titulo} />\n                <div className=\"info\">\n                  <h3>{peli.titulo}</h3>\n                  <p>{peli.descripcion}</p>\n                  <span>{peli.genero}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default App;*/\n\n/*\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Aseg√∫rate de que este archivo exista en tu proyecto\n\nfunction App() {\n  // Estados para almacenar las pel√≠culas, el filtro de b√∫squeda, el modo de b√∫squeda y la recomendaci√≥n de IA\n  const [peliculas, setPeliculas] = useState([]);\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\n  const [busqueda, setBusqueda] = useState('');\n  const [modoDescripcion, setModoDescripcion] = useState(false); // false para b√∫squeda tradicional, true para IA\n  const [recomendacion, setRecomendacion] = useState('');\n\n  // useEffect para cargar las pel√≠culas desde el backend cuando el componente se monta\n  useEffect(() => {\n    // Realiza una petici√≥n GET a la API de pel√≠culas de tu backend\n    fetch('/api/peliculas')\n      .then(res => res.json()) // Convierte la respuesta a JSON\n      .then(data => {\n        setPeliculas(data); // Guarda todas las pel√≠culas obtenidas\n        setPeliculasFiltradas(data); // Inicialmente, las pel√≠culas filtradas son todas las pel√≠culas\n      })\n      .catch(err => console.error('Error al obtener pel√≠culas:', err)); // Manejo de errores\n  }, []); // El array de dependencias vac√≠o asegura que este efecto se ejecute solo una vez (al montar)\n\n  // Funci√≥n para manejar la b√∫squeda tradicional (por t√≠tulo o g√©nero)\n  const handleBuscar = (e) => {\n    e.preventDefault(); // Previene el comportamiento por defecto del formulario\n    const texto = busqueda.toLowerCase(); // Convierte el texto de b√∫squeda a min√∫sculas\n    // Filtra las pel√≠culas que coincidan con el t√≠tulo, g√©nero o que empiecen con el texto\n    const resultado = peliculas.filter(p =>\n      p.titulo.toLowerCase().includes(texto) ||\n      p.genero.toLowerCase().includes(texto) ||\n      p.titulo.toLowerCase().startsWith(texto)\n    );\n    setPeliculasFiltradas(resultado); // Actualiza el estado de las pel√≠culas filtradas\n    setRecomendacion(''); // Limpia cualquier recomendaci√≥n de IA anterior\n  };\n\n  // Funci√≥n para manejar la b√∫squeda por descripci√≥n usando IA\n  const handleBuscarPorDescripcion = async () => {\n    try {\n      // Realiza una petici√≥n POST a la API de recomendaciones de IA de tu backend\n      const res = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        // Env√≠a un prompt a la IA con la descripci√≥n de b√∫squeda y el cat√°logo de pel√≠culas\n        body: JSON.stringify({ prompt: `Dame una recomendaci√≥n basada en esta descripci√≥n: ${busqueda}. Usa solo pel√≠culas de este cat√°logo: ${peliculas.map(p => p.titulo).join(', ')}.` })\n      });\n      const data = await res.json(); // Convierte la respuesta a JSON\n      setRecomendacion(data.recomendacion); // Guarda la recomendaci√≥n generada por la IA\n\n      // Filtra las pel√≠culas cuyo t√≠tulo est√© contenido en la recomendaci√≥n de la IA\n      const seleccionadas = peliculas.filter(p =>\n        data.recomendacion.toLowerCase().includes(p.titulo.toLowerCase())\n      );\n\n      // Si hay pel√≠culas seleccionadas, actualiza el estado de las pel√≠culas filtradas\n      if (seleccionadas.length > 0) {\n        setPeliculasFiltradas(seleccionadas);\n      } else {\n        // Si no hay coincidencias directas, puedes decidir qu√© mostrar (por ejemplo, todas las pel√≠culas o un mensaje)\n        setPeliculasFiltradas([]); // Opcional: mostrar un array vac√≠o si no hay coincidencias\n      }\n    } catch (err) {\n      console.error('Error con IA:', err); // Manejo de errores en la petici√≥n a la IA\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CineVerse</h1>\n        <form className=\"buscador\" onSubmit={modoDescripcion ? null : handleBuscar}>\n          <input\n            type=\"text\"\n            placeholder={modoDescripcion ? 'Describe la peli que buscas...' : 'Busca por t√≠tulo o g√©nero'}\n            value={busqueda}\n            onChange={e => setBusqueda(e.target.value)}\n          />\n          <div className=\"botones-busqueda\">\n            {\n          // Bot√≥n de b√∫squeda tradicional o por IA, seg√∫n el modo seleccionado \n          }\n            {!modoDescripcion ? (\n              <button type=\"submit\">Buscar</button>\n            ) : (\n              <button type=\"button\" onClick={handleBuscarPorDescripcion}>Buscar por IA</button>\n            )}\n            {\n              // Bot√≥n para alternar entre los modos de b√∫squeda \n              }\n            <button\n              type=\"button\"\n              onClick={() => setModoDescripcion(!modoDescripcion)}\n            >\n              Cambiar a b√∫squeda {modoDescripcion ? 'tradicional' : 'por IA'}\n            </button>\n          </div>\n        </form>\n        {\n          // Muestra la recomendaci√≥n de IA si existe \n          }\n        {recomendacion && (\n          <div className=\"bloque-recomendaciones\">\n            <h2>IA sugiere:</h2>\n            <p>{recomendacion}</p>\n          </div>\n        )}\n      </header>\n\n      <main className=\"grid\">\n        {\n        // Mapea y renderiza las pel√≠culas filtradas \n        }\n        {peliculasFiltradas.map((p, i) => (\n          <div className=\"tarjeta\" key={i}>\n            {\n          //Muestra el p√≥ster de la pel√≠cula o un placeholder si no hay imagen \n          }\n            <img\n              src={p.poster || `https://placehold.co/200x300/cccccc/333333?text=${p.titulo}`}\n              alt={p.titulo}\n              className=\"rounded-lg shadow-md\"\n            />\n            <div className=\"info\">\n              <h3>{p.titulo}</h3>\n              <p>{p.genero}</p>\n              {\n              //Muestra una sinopsis limitada a 60 caracteres \n              }\n              <span>{p.descripcion?.slice(0, 60)}...</span>\n            </div>\n          </div>\n        ))}\n      </main>\n    </div>\n  );\n}\n\nexport default App; // <<-- ¬°¬°¬°Esta l√≠nea es crucial!!!\n*/","map":{"version":3,"names":[],"sources":["C:/AWS/CECYTEMDespliegue/Practica4_1/recomendaciones-ia/src/App.js"],"sourcesContent":["/*import React, { useState } from 'react';\nimport './App.css';\nimport peliculas from './data/peliculas.json';\nfunction App() {\n  const [input, setInput] = useState('');\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState(peliculas);\n  const [recomendacionIA, setRecomendacionIA] = useState('');\n  const [peliculasRecomendadas, setPeliculasRecomendadas] = useState([]);\n  \n  const handleBuscarTexto = () => {\n    const texto = input.toLowerCase();\n\n    const filtradas = peliculas.filter((peli) =>\n      peli.titulo.toLowerCase().includes(texto) ||\n      peli.genero.toLowerCase().includes(texto) ||\n      peli.titulo.toLowerCase().startsWith(texto)\n    );\n\n    setPeliculasFiltradas(filtradas);\n    setPeliculasRecomendadas([]);\n    setRecomendacionIA('');\n  };\n  const handleBuscarDescripcion = async () => {\n    setRecomendacionIA('Pensando...');\n    setPeliculasRecomendadas([]);\n    setPeliculasFiltradas([]);\n    try {\n      const response = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          prompt: `Tengo una base de datos con estas pel√≠culas: ${peliculas.map(p => p.titulo).join(', ')}. Quiero que me digas solo los t√≠tulos de las pel√≠culas que coincidan con esta descripci√≥n: \"${input}\". Devu√©lveme √∫nicamente los t√≠tulos separados por comas.`\n      }),\n    });\n\n    const data = await response.json();\n    const textoIA = data.recomendacion.toLowerCase();\n    setRecomendacionIA(data.recomendacion);\n\n    const coincidencias = peliculas.filter((peli) => \n      textoIA.includes(peli.titulo.toLowerCase())\n    );\n    \n    setPeliculasRecomendadas(coincidencias);\n  } catch (err) {\n    setRecomendacionIA('‚ùå Error al obtener recomendaci√≥n IA.');\n  }\n};\n\nreturn (\n  <div className=\"App\">\n    <h1 className=\"titulo\">CECYFLIX</h1>\n    <div className=\"buscador\">\n      <input\n        type=\"text\"\n        placeholder=\"¬øQu√© te gustar√≠a ver hoy?\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        required\n      />\n      <button onClick={handleBuscarTexto}>Buscar</button>\n      <button onClick={handleBuscarDescripcion} className=\"btn-ia\">\n      Buscar por descripci√≥n</button>\n  </div>\n  \n  {recomendacionIA && (\n    <div className=\"bloque-recomendaciones\">\n      <h2>‚ú® Recomendaci√≥n IA</h2>\n      <p>{recomendacionIA}</p>\n    </div>\n  )}\n\n  {peliculasRecomendadas.length > 0 && (\n    <div className=\"galeria\">\n      <h2>üéû Pel√≠culas recomendadas por IA</h2>\n      <div className=\"grid\">\n        {peliculasRecomendadas.map((peli) => (\n          <div className=\"tarjeta\" key={peli.id}>\n            <img src={peli.poster} alt={peli.titulo} />\n            <div className=\"info\">\n              <h3>{peli.titulo}</h3>\n              <p>{peli.descripcion}</p>\n              <span>{peli.genero}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )}\n\n      {peliculasFiltradas.length > 0 && (\n        <div className=\"galeria\">\n          <h2>üé¨ Todas las pel√≠culas</h2>\n          <div className=\"grid\">\n            {peliculasFiltradas.map((peli) => (\n              <div className=\"tarjeta\" key={peli.id}>\n                <img src={peli.poster} alt={peli.titulo} />\n                <div className=\"info\">\n                  <h3>{peli.titulo}</h3>\n                  <p>{peli.descripcion}</p>\n                  <span>{peli.genero}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default App;*/\n\n/*\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Aseg√∫rate de que este archivo exista en tu proyecto\n\nfunction App() {\n  // Estados para almacenar las pel√≠culas, el filtro de b√∫squeda, el modo de b√∫squeda y la recomendaci√≥n de IA\n  const [peliculas, setPeliculas] = useState([]);\n  const [peliculasFiltradas, setPeliculasFiltradas] = useState([]);\n  const [busqueda, setBusqueda] = useState('');\n  const [modoDescripcion, setModoDescripcion] = useState(false); // false para b√∫squeda tradicional, true para IA\n  const [recomendacion, setRecomendacion] = useState('');\n\n  // useEffect para cargar las pel√≠culas desde el backend cuando el componente se monta\n  useEffect(() => {\n    // Realiza una petici√≥n GET a la API de pel√≠culas de tu backend\n    fetch('/api/peliculas')\n      .then(res => res.json()) // Convierte la respuesta a JSON\n      .then(data => {\n        setPeliculas(data); // Guarda todas las pel√≠culas obtenidas\n        setPeliculasFiltradas(data); // Inicialmente, las pel√≠culas filtradas son todas las pel√≠culas\n      })\n      .catch(err => console.error('Error al obtener pel√≠culas:', err)); // Manejo de errores\n  }, []); // El array de dependencias vac√≠o asegura que este efecto se ejecute solo una vez (al montar)\n\n  // Funci√≥n para manejar la b√∫squeda tradicional (por t√≠tulo o g√©nero)\n  const handleBuscar = (e) => {\n    e.preventDefault(); // Previene el comportamiento por defecto del formulario\n    const texto = busqueda.toLowerCase(); // Convierte el texto de b√∫squeda a min√∫sculas\n    // Filtra las pel√≠culas que coincidan con el t√≠tulo, g√©nero o que empiecen con el texto\n    const resultado = peliculas.filter(p =>\n      p.titulo.toLowerCase().includes(texto) ||\n      p.genero.toLowerCase().includes(texto) ||\n      p.titulo.toLowerCase().startsWith(texto)\n    );\n    setPeliculasFiltradas(resultado); // Actualiza el estado de las pel√≠culas filtradas\n    setRecomendacion(''); // Limpia cualquier recomendaci√≥n de IA anterior\n  };\n\n  // Funci√≥n para manejar la b√∫squeda por descripci√≥n usando IA\n  const handleBuscarPorDescripcion = async () => {\n    try {\n      // Realiza una petici√≥n POST a la API de recomendaciones de IA de tu backend\n      const res = await fetch('/api/recomendaciones', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        // Env√≠a un prompt a la IA con la descripci√≥n de b√∫squeda y el cat√°logo de pel√≠culas\n        body: JSON.stringify({ prompt: `Dame una recomendaci√≥n basada en esta descripci√≥n: ${busqueda}. Usa solo pel√≠culas de este cat√°logo: ${peliculas.map(p => p.titulo).join(', ')}.` })\n      });\n      const data = await res.json(); // Convierte la respuesta a JSON\n      setRecomendacion(data.recomendacion); // Guarda la recomendaci√≥n generada por la IA\n\n      // Filtra las pel√≠culas cuyo t√≠tulo est√© contenido en la recomendaci√≥n de la IA\n      const seleccionadas = peliculas.filter(p =>\n        data.recomendacion.toLowerCase().includes(p.titulo.toLowerCase())\n      );\n\n      // Si hay pel√≠culas seleccionadas, actualiza el estado de las pel√≠culas filtradas\n      if (seleccionadas.length > 0) {\n        setPeliculasFiltradas(seleccionadas);\n      } else {\n        // Si no hay coincidencias directas, puedes decidir qu√© mostrar (por ejemplo, todas las pel√≠culas o un mensaje)\n        setPeliculasFiltradas([]); // Opcional: mostrar un array vac√≠o si no hay coincidencias\n      }\n    } catch (err) {\n      console.error('Error con IA:', err); // Manejo de errores en la petici√≥n a la IA\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>CineVerse</h1>\n        <form className=\"buscador\" onSubmit={modoDescripcion ? null : handleBuscar}>\n          <input\n            type=\"text\"\n            placeholder={modoDescripcion ? 'Describe la peli que buscas...' : 'Busca por t√≠tulo o g√©nero'}\n            value={busqueda}\n            onChange={e => setBusqueda(e.target.value)}\n          />\n          <div className=\"botones-busqueda\">\n            {\n          // Bot√≥n de b√∫squeda tradicional o por IA, seg√∫n el modo seleccionado \n          }\n            {!modoDescripcion ? (\n              <button type=\"submit\">Buscar</button>\n            ) : (\n              <button type=\"button\" onClick={handleBuscarPorDescripcion}>Buscar por IA</button>\n            )}\n            {\n              // Bot√≥n para alternar entre los modos de b√∫squeda \n              }\n            <button\n              type=\"button\"\n              onClick={() => setModoDescripcion(!modoDescripcion)}\n            >\n              Cambiar a b√∫squeda {modoDescripcion ? 'tradicional' : 'por IA'}\n            </button>\n          </div>\n        </form>\n        {\n          // Muestra la recomendaci√≥n de IA si existe \n          }\n        {recomendacion && (\n          <div className=\"bloque-recomendaciones\">\n            <h2>IA sugiere:</h2>\n            <p>{recomendacion}</p>\n          </div>\n        )}\n      </header>\n\n      <main className=\"grid\">\n        {\n        // Mapea y renderiza las pel√≠culas filtradas \n        }\n        {peliculasFiltradas.map((p, i) => (\n          <div className=\"tarjeta\" key={i}>\n            {\n          //Muestra el p√≥ster de la pel√≠cula o un placeholder si no hay imagen \n          }\n            <img\n              src={p.poster || `https://placehold.co/200x300/cccccc/333333?text=${p.titulo}`}\n              alt={p.titulo}\n              className=\"rounded-lg shadow-md\"\n            />\n            <div className=\"info\">\n              <h3>{p.titulo}</h3>\n              <p>{p.genero}</p>\n              {\n              //Muestra una sinopsis limitada a 60 caracteres \n              }\n              <span>{p.descripcion?.slice(0, 60)}...</span>\n            </div>\n          </div>\n        ))}\n      </main>\n    </div>\n  );\n}\n\nexport default App; // <<-- ¬°¬°¬°Esta l√≠nea es crucial!!!\n*/\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}